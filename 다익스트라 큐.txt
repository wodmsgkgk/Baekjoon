///////////////////다익스트라 PQ ///////////////////////////////

package Main;

import java.util.Comparator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.Vector;

public class Main {
	static Vector<Vector<point>> arr;
	static boolean[] isVisits; // 정점의 방문 확인
	static int vCount; // 정점의 수
	static int eCount; // 간선의 수
	static int[] dis;
	static PriorityQueue<point> p_queue;
	private static int flag;
	public static final int INF = Integer.MAX_VALUE;

	static class point {
		int from;
		int to;
		int weight;

		point() {
		}

		point(int from, int to, int weight) {
			this.from = from;
			this.to = to;
			this.weight = weight;
		}
	}

    static class Get_Line implements Comparator<point>{

        @Override
        public int compare(point arg0, point arg1) {
             
            if(arg0.weight>arg1.weight)
                return 1;
            else if(arg0.weight<arg1.weight)
                return -1;
            return 0;
        }
    }
    
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		Comparator<point> comparator=new Get_Line();
		vCount = scanner.nextInt();
		eCount = scanner.nextInt();
		int start = scanner.nextInt();
		arr = new Vector<Vector<point>>(eCount);
		isVisits = new boolean[vCount + 1];
		dis = new int[vCount + 1];
		p_queue=new PriorityQueue<point>(eCount,comparator);

		for (int i = 0; i <= vCount; i++) {
			arr.add(new Vector<point>());
			dis[i] = INF;
			isVisits[i] = false;
		}


		for (int i = 1; i <= eCount; i++) {
			int from = scanner.nextInt();
			int to = scanner.nextInt();
			int weight = scanner.nextInt();
			point temp = new point(from, to, weight);

			arr.get(from).add(temp);

		}

		//int end = scanner.nextInt();
		dis[start] = 0;
		
			point temp = new point(INF, 1, dis[1]);
			p_queue.add(temp);
		
		p_queue.remove();
		dijkstra(start);
		
		for (int i = 1; i <= vCount; i++) {
			if (dis[i] == INF)
				System.out.println("INF");
			else
				System.out.println(dis[i]);
		}
		//System.out.println(dis[end]);

	}

	public static void dijkstra(int v) {
		if (!isVisits[v]) {
			isVisits[v] = true;
			for (int i = 0; i < arr.get(v).size(); i++) {
				if (dis[arr.get(v).elementAt(i).to] > dis[v] + arr.get(v).elementAt(i).weight && !isVisits[arr.get(v).elementAt(i).to]) {
					dis[arr.get(v).elementAt(i).to] = dis[v] + arr.get(v).elementAt(i).weight;
					point cur =new point(INF , arr.get(v).elementAt(i).to , dis[arr.get(v).elementAt(i).to]);
					p_queue.add(cur);
					//System.out.println("from : " + v + " to : " + arr.get(v).elementAt(i).to + " weight : "	+ dis[arr.get(v).elementAt(i).to]);
				}
			}
			//System.out.println(v + " end size :" + arr.get(v).size());
		}
		if (!p_queue.isEmpty())
			dijkstra(p_queue.poll().to);
	}
}